#include "test_base.h"

/*  
 
 __global__ void kernel(unsigned * data, int w, int h, int d) {
	if (threadIdx.x < w){
		if(threadIdx.y < h){
			if (threadIdx.z < d){
				data[threadIdx.x + threadIdx.y*w + w*h*threadIdx.z] = threadIdx.x + threadIdx.y*w + w*h*threadIdx.z;
			}
		}
	}
}
 
*/

int main(){
	init_test();
	const std::string test_source =
	"//\n"
	"// Generated by NVIDIA NVVM Compiler\n"
	"//\n"
	"// Compiler Build ID: CL-19324607\n"
	"// Cuda compilation tools, release 7.0, V7.0.27\n"
	"// Based on LLVM 3.4svn\n"
	"//\n"
	"\n"
	".version 4.2\n"
	".target sm_20\n"
	".address_size 64\n"
	"\n"
	"	// .globl	_Z6kernelPjiii\n"
	"\n"
	".visible .entry kernel(\n"
	"	.param .u64 _Z6kernelPjiii_param_0,\n"
	"	.param .u32 _Z6kernelPjiii_param_1,\n"
	"	.param .u32 _Z6kernelPjiii_param_2,\n"
	"	.param .u32 _Z6kernelPjiii_param_3\n"
	")\n"
	"{\n"
	"	.reg .pred 	%p<6>;\n"
	"	.reg .s32 	%r<9>;\n"
	"	.reg .s64 	%rd<5>;\n"
	"\n"
	"\n"
	"	ld.param.u64 	%rd1, [_Z6kernelPjiii_param_0];\n"
	"	ld.param.u32 	%r4, [_Z6kernelPjiii_param_1];\n"
	"	ld.param.u32 	%r5, [_Z6kernelPjiii_param_2];\n"
	"	ld.param.u32 	%r6, [_Z6kernelPjiii_param_3];\n"
	"	mov.u32 	%r1, %tid.x;\n"
	"	setp.lt.u32	%p1, %r1, %r4;\n"
	"	mov.u32 	%r2, %tid.y;\n"
	"	setp.lt.u32	%p2, %r2, %r5;\n"
	"	and.pred  	%p3, %p1, %p2;\n"
	"	mov.u32 	%r3, %tid.z;\n"
	"	setp.lt.u32	%p4, %r3, %r6;\n"
	"	and.pred  	%p5, %p3, %p4;\n"
	"	@!%p5 bra 	BB0_2;\n"
	"	bra.uni 	BB0_1;\n"
	"\n"
	"BB0_1:\n"
	"	cvta.to.global.u64 	%rd2, %rd1;\n"
	"	mad.lo.s32 	%r7, %r3, %r5, %r2;\n"
	"	mad.lo.s32 	%r8, %r7, %r4, %r1;\n"
	"	mul.wide.u32 	%rd3, %r8, 4;\n"
	"	add.s64 	%rd4, %rd2, %rd3;\n"
	"	st.global.u32 	[%rd4], %r8;\n"
	"\n"
	"BB0_2:\n"
	"	ret;\n"
	"}\n"
	"\n"
	"\n"
	;
	CUmodule modId = 0;
	CUfunction funcHandle = 0;
	cu_assert(cuModuleLoadData(&modId, test_source.c_str()));
	cu_assert(cuModuleGetFunction(&funcHandle, modId, "kernel"));
	CUdeviceptr devValue;
	int w = 5;
	int h = 5;
	int d = 5;
	const int size = w * h * d;
	unsigned* hostValues = (unsigned*)malloc(size * sizeof(unsigned));
	cu_assert(cuMemAlloc(&devValue, size * sizeof(unsigned)));
	void * params[] = {&devValue, &w, &h, &d};
	auto result = cuLaunchKernel(funcHandle, 1,1,1, 10,10,10, 0,0, params, nullptr);
	cu_assert(result);
	cu_assert(cuMemcpyDtoH(hostValues, devValue, size * sizeof(unsigned)));
	cu_assert(cuMemFree(devValue));
	cu_assert(cuModuleUnload(modId));
	for (int k=0 ; k<d ; ++k){
		for (int j=0 ; j<h ; ++j){
			for (int i=0 ; i<w ; ++i){
				std::cout << i << " " << j << " " << k << " " << hostValues[i + j*w + k*w*h] << '\n';
			}
		}
	}
	free(hostValues);
	return 0;
}
