#include "test_base.h"

/*

__global__ void kernel(int* out, int* in, int count) {
	int v[256];
	for (int i=0 ; i<256 ; ++i)
		v[i] = 0;
	for (int i=0 ; i<count ; ++i)
		v[ in[i] % 256 ] += 1;
	for (int i=0 ; i<256 ; ++i)
		out[i] = v[i];
}
* 
*/

int main(){
	init_test();
	const std::string source = 
	"//\n"
	"// Generated by NVIDIA NVVM Compiler\n"
	"//\n"
	"// Compiler Build ID: CL-19856038\n"
	"// Cuda compilation tools, release 7.5, V7.5.17\n"
	"// Based on LLVM 3.4svn\n"
	"//\n"
	"\n"
	".version 4.3\n"
	".target sm_20\n"
	".address_size 64\n"
	"\n"
	"	// .globl	_Z6kernelPiS_i\n"
	"\n"
	".visible .entry _Z6kernelPiS_i(\n"
	"	.param .u64 _Z6kernelPiS_i_param_0,\n"
	"	.param .u64 _Z6kernelPiS_i_param_1,\n"
	"	.param .u32 _Z6kernelPiS_i_param_2\n"
	")\n"
	"{\n"
	"	.local .align 4 .b8 	__local_depot0[1024];\n"
	"	.reg .b64 	%SP;\n"
	"	.reg .b64 	%SPL;\n"
	"	.reg .pred 	%p<5>;\n"
	"	.reg .b32 	%r<39>;\n"
	"	.reg .b64 	%rd<25>;\n"
	"\n"
	"\n"
	"	mov.u64 	%rd24, __local_depot0;\n"
	"	cvta.local.u64 	%SP, %rd24;\n"
	"	ld.param.u64 	%rd13, [_Z6kernelPiS_i_param_0];\n"
	"	ld.param.u64 	%rd12, [_Z6kernelPiS_i_param_1];\n"
	"	ld.param.u32 	%r7, [_Z6kernelPiS_i_param_2];\n"
	"	cvta.to.global.u64 	%rd23, %rd13;\n"
	"	add.u64 	%rd14, %SP, 0;\n"
	"	cvta.to.local.u64 	%rd2, %rd14;\n"
	"	mov.u32 	%r36, -256;\n"
	"	mov.u64 	%rd22, %rd2;\n"
	"\n"
	"BB0_1:\n"
	"	mov.u64 	%rd15, 0;\n"
	"	st.local.u32 	[%rd22+4], %rd15;\n"
	"	st.local.u32 	[%rd22], %rd15;\n"
	"	st.local.u32 	[%rd22+12], %rd15;\n"
	"	st.local.u32 	[%rd22+8], %rd15;\n"
	"	st.local.u32 	[%rd22+20], %rd15;\n"
	"	st.local.u32 	[%rd22+16], %rd15;\n"
	"	st.local.u32 	[%rd22+28], %rd15;\n"
	"	st.local.u32 	[%rd22+24], %rd15;\n"
	"	st.local.u32 	[%rd22+36], %rd15;\n"
	"	st.local.u32 	[%rd22+32], %rd15;\n"
	"	st.local.u32 	[%rd22+44], %rd15;\n"
	"	st.local.u32 	[%rd22+40], %rd15;\n"
	"	st.local.u32 	[%rd22+52], %rd15;\n"
	"	st.local.u32 	[%rd22+48], %rd15;\n"
	"	st.local.u32 	[%rd22+60], %rd15;\n"
	"	st.local.u32 	[%rd22+56], %rd15;\n"
	"	st.local.u32 	[%rd22+68], %rd15;\n"
	"	st.local.u32 	[%rd22+64], %rd15;\n"
	"	st.local.u32 	[%rd22+76], %rd15;\n"
	"	st.local.u32 	[%rd22+72], %rd15;\n"
	"	st.local.u32 	[%rd22+84], %rd15;\n"
	"	st.local.u32 	[%rd22+80], %rd15;\n"
	"	st.local.u32 	[%rd22+92], %rd15;\n"
	"	st.local.u32 	[%rd22+88], %rd15;\n"
	"	st.local.u32 	[%rd22+100], %rd15;\n"
	"	st.local.u32 	[%rd22+96], %rd15;\n"
	"	st.local.u32 	[%rd22+108], %rd15;\n"
	"	st.local.u32 	[%rd22+104], %rd15;\n"
	"	st.local.u32 	[%rd22+116], %rd15;\n"
	"	st.local.u32 	[%rd22+112], %rd15;\n"
	"	st.local.u32 	[%rd22+124], %rd15;\n"
	"	st.local.u32 	[%rd22+120], %rd15;\n"
	"	add.s64 	%rd22, %rd22, 128;\n"
	"	add.s32 	%r36, %r36, 32;\n"
	"	setp.ne.s32	%p1, %r36, 0;\n"
	"	@%p1 bra 	BB0_1;\n"
	"\n"
	"	cvta.to.global.u64 	%rd18, %rd12;\n"
	"	mov.u32 	%r38, -256;\n"
	"	mov.u32 	%r37, 0;\n"
	"	setp.lt.s32	%p2, %r7, 1;\n"
	"	mov.u64 	%rd21, %rd2;\n"
	"	@%p2 bra 	BB0_4;\n"
	"\n"
	"BB0_3:\n"
	"	ldu.global.u32 	%r12, [%rd18];\n"
	"	shr.s32 	%r13, %r12, 31;\n"
	"	shr.u32 	%r14, %r13, 24;\n"
	"	add.s32 	%r15, %r12, %r14;\n"
	"	and.b32  	%r16, %r15, -256;\n"
	"	sub.s32 	%r17, %r12, %r16;\n"
	"	mul.wide.s32 	%rd16, %r17, 4;\n"
	"	add.s64 	%rd17, %rd2, %rd16;\n"
	"	ld.local.u32 	%r18, [%rd17];\n"
	"	add.s32 	%r19, %r18, 1;\n"
	"	st.local.u32 	[%rd17], %r19;\n"
	"	add.s64 	%rd18, %rd18, 4;\n"
	"	add.s32 	%r37, %r37, 1;\n"
	"	setp.lt.s32	%p3, %r37, %r7;\n"
	"	mov.u64 	%rd20, %rd2;\n"
	"	mov.u64 	%rd21, %rd20;\n"
	"	@%p3 bra 	BB0_3;\n"
	"\n"
	"BB0_4:\n"
	"	ld.local.u32 	%r20, [%rd21];\n"
	"	ld.local.u32 	%r21, [%rd21+4];\n"
	"	ld.local.u32 	%r22, [%rd21+8];\n"
	"	ld.local.u32 	%r23, [%rd21+12];\n"
	"	ld.local.u32 	%r24, [%rd21+16];\n"
	"	ld.local.u32 	%r25, [%rd21+20];\n"
	"	ld.local.u32 	%r26, [%rd21+24];\n"
	"	ld.local.u32 	%r27, [%rd21+28];\n"
	"	ld.local.u32 	%r28, [%rd21+32];\n"
	"	ld.local.u32 	%r29, [%rd21+36];\n"
	"	ld.local.u32 	%r30, [%rd21+40];\n"
	"	ld.local.u32 	%r31, [%rd21+44];\n"
	"	ld.local.u32 	%r32, [%rd21+48];\n"
	"	ld.local.u32 	%r33, [%rd21+52];\n"
	"	ld.local.u32 	%r34, [%rd21+56];\n"
	"	ld.local.u32 	%r35, [%rd21+60];\n"
	"	st.global.u32 	[%rd23], %r20;\n"
	"	st.global.u32 	[%rd23+4], %r21;\n"
	"	st.global.u32 	[%rd23+8], %r22;\n"
	"	st.global.u32 	[%rd23+12], %r23;\n"
	"	st.global.u32 	[%rd23+16], %r24;\n"
	"	st.global.u32 	[%rd23+20], %r25;\n"
	"	st.global.u32 	[%rd23+24], %r26;\n"
	"	st.global.u32 	[%rd23+28], %r27;\n"
	"	st.global.u32 	[%rd23+32], %r28;\n"
	"	st.global.u32 	[%rd23+36], %r29;\n"
	"	st.global.u32 	[%rd23+40], %r30;\n"
	"	st.global.u32 	[%rd23+44], %r31;\n"
	"	st.global.u32 	[%rd23+48], %r32;\n"
	"	st.global.u32 	[%rd23+52], %r33;\n"
	"	st.global.u32 	[%rd23+56], %r34;\n"
	"	st.global.u32 	[%rd23+60], %r35;\n"
	"	add.s64 	%rd23, %rd23, 64;\n"
	"	add.s64 	%rd21, %rd21, 64;\n"
	"	add.s32 	%r38, %r38, 16;\n"
	"	setp.ne.s32	%p4, %r38, 0;\n"
	"	@%p4 bra 	BB0_4;\n"
	"\n"
	"	ret;\n"
	"}\n";
	CUmodule modId = 0;
	CUfunction funcHandle = 0;
	cu_assert(cuModuleLoadData(&modId, source.c_str()));
	cu_assert(cuModuleGetFunction(&funcHandle, modId, "_Z6kernelPiS_i"));
	const int count = 32;
	int in[count], out[256];
	for (int i=0 ; i<count ; ++i)
		in[i] = i%6;
	CUdeviceptr devIn, devOut, devCount;
	cu_assert(cuMemAlloc(&devCount, sizeof(count)));
	cu_assert(cuMemAlloc(&devIn, sizeof(in[0]) * count));
	cu_assert(cuMemAlloc(&devOut, sizeof(out[0]) * 256));
	cu_assert(cuMemcpyHtoD(devCount, &count, sizeof(count)));
	cu_assert(cuMemcpyHtoD(devIn, &in, sizeof(in[0]) * count));
	void * params[] = {&devOut, &devIn, (void*)&count};
	cu_assert(cuLaunchKernel(funcHandle, 1,1,1, 1,1,1, 0,0, params, nullptr));
	cu_assert(cuMemcpyDtoH(&out, devOut, sizeof(out[0]) * 256));
	for (int i=0 ; i<count ; ++i)
		std::cout << out[i] << ' ';
	cu_assert(cuMemFree(devOut));
	cu_assert(cuMemFree(devIn));
	cu_assert(cuMemFree(devCount));
	return 0;
}
