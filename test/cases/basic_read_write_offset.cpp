#include "test_base.h"
#include <cstring>

/* 
__global__ kernel(int* output, const int* input) {
	output[0] = input[0];
	output[1] = input[1];
	output[2] = input[2];
	output[3] = input[3];
}

__global__ kernel_double(double* output, const double* input) {
	output[0] = input[0];
	output[1] = input[1];
	output[2] = input[2];
	output[3] = input[3];
}
*/

int main(){
	init_test();
	const std::string test_source =
	"//\n"
	"// Generated by NVIDIA NVVM Compiler\n"
	"//\n"
	"// Compiler Build ID: CL-19856038\n"
	"// Cuda compilation tools, release 7.5, V7.5.17\n"
	"// Based on LLVM 3.4svn\n"
	"//\n"
	"\n"
	".version 4.3\n"
	".target sm_20\n"
	".address_size 64\n"
	"\n"
	"	// .globl	_Z6kernelPiPKi\n"
	"\n"
	".visible .entry kernel(\n"
	"	.param .u64 _Z6kernelPiPKi_param_0,\n"
	"	.param .u64 _Z6kernelPiPKi_param_1\n"
	")\n"
	"{\n"
	"	.reg .b32 	%r<5>;\n"
	"	.reg .b64 	%rd<5>;\n"
	"\n"
	"\n"
	"	ld.param.u64 	%rd1, [_Z6kernelPiPKi_param_0];\n"
	"	ld.param.u64 	%rd2, [_Z6kernelPiPKi_param_1];\n"
	"	cvta.to.global.u64 	%rd3, %rd1;\n"
	"	cvta.to.global.u64 	%rd4, %rd2;\n"
	"	ldu.global.u32 	%r1, [%rd4];\n"
	"	st.global.u32 	[%rd3], %r1;\n"
	"	ld.global.u32 	%r2, [%rd4+4];\n"
	"	st.global.u32 	[%rd3+4], %r2;\n"
	"	ld.global.u32 	%r3, [%rd4+8];\n"
	"	st.global.u32 	[%rd3+8], %r3;\n"
	"	ld.global.u32 	%r4, [%rd4+12];\n"
	"	st.global.u32 	[%rd3+12], %r4;\n"
	"	ret;\n"
	"}\n"
	"\n"
	"	// .globl	_Z13kernel_doublePdPKd\n"
	".visible .entry kernel_double(\n"
	"	.param .u64 _Z13kernel_doublePdPKd_param_0,\n"
	"	.param .u64 _Z13kernel_doublePdPKd_param_1\n"
	")\n"
	"{\n"
	"	.reg .f64 	%fd<5>;\n"
	"	.reg .b64 	%rd<5>;\n"
	"\n"
	"\n"
	"	ld.param.u64 	%rd1, [_Z13kernel_doublePdPKd_param_0];\n"
	"	ld.param.u64 	%rd2, [_Z13kernel_doublePdPKd_param_1];\n"
	"	cvta.to.global.u64 	%rd3, %rd1;\n"
	"	cvta.to.global.u64 	%rd4, %rd2;\n"
	"	ldu.global.f64 	%fd1, [%rd4];\n"
	"	st.global.f64 	[%rd3], %fd1;\n"
	"	ld.global.f64 	%fd2, [%rd4+8];\n"
	"	st.global.f64 	[%rd3+8], %fd2;\n"
	"	ld.global.f64 	%fd3, [%rd4+16];\n"
	"	st.global.f64 	[%rd3+16], %fd3;\n"
	"	ld.global.f64 	%fd4, [%rd4+24];\n"
	"	st.global.f64 	[%rd3+24], %fd4;\n"
	"	ret;\n"
	"}\n"
	"\n"
	"\n"
	;
	CUmodule modId = 0;
	CUfunction funcHandle = 0;
	cu_assert(cuModuleLoadData(&modId, test_source.c_str()));
	cu_assert(cuModuleGetFunction(&funcHandle, modId, "kernel"));
	CUdeviceptr devArrayInt, devArrayDouble;
	CUdeviceptr devArrayIntOut, devArrayDoubleOut;
	int size = 4;
	int hostArrayIn[size], hostArrayOut[size];
	double hostArrayDoubleIn[size], hostArrayDoubleOut[size];
	hostArrayIn[0] = 14;
	hostArrayIn[1] = 923;
	hostArrayIn[2] = -64;
	hostArrayIn[3] = 99;
	hostArrayDoubleIn[0] = 0.123;
	hostArrayDoubleIn[1] = -12.19;
	hostArrayDoubleIn[2] = 2323.1;
	hostArrayDoubleIn[3] = -.4;
	cu_assert(cuMemAlloc(&devArrayInt, sizeof(int) * size));
	cu_assert(cuMemAlloc(&devArrayIntOut, sizeof(int) * size));
	cu_assert(cuMemAlloc(&devArrayDouble, sizeof(double) * size));
	cu_assert(cuMemAlloc(&devArrayDoubleOut, sizeof(double) * size));
	cu_assert(cuMemcpyHtoD(devArrayInt, hostArrayIn, sizeof(int) * size));
	cu_assert(cuMemcpyHtoD(devArrayDouble, hostArrayDoubleIn, sizeof(double) * size));
	
	void * params[] = {&devArrayIntOut, &devArrayInt};
	auto result = cuLaunchKernel(funcHandle, 1,1,1, 1,1,1, 0,0, params, nullptr);
	cu_assert(result);
	cu_assert(cuMemcpyDtoH(hostArrayOut, devArrayIntOut, sizeof(hostArrayOut[0])*size));
	
	cu_assert(cuModuleGetFunction(&funcHandle, modId, "kernel_double"));
	params[0] = &devArrayDoubleOut;
	params[1] = &devArrayDouble;
	result = cuLaunchKernel(funcHandle, 1,1,1, 1,1,1, 0,0, params, nullptr);
	cu_assert(result);
	
	cu_assert(cuMemcpyDtoH(hostArrayDoubleOut, devArrayDoubleOut, sizeof(hostArrayDoubleOut[0])*size));
	cu_assert(cuMemFree(devArrayIntOut));
	cu_assert(cuMemFree(devArrayInt));
	cu_assert(cuMemFree(devArrayDoubleOut));
	cu_assert(cuMemFree(devArrayDouble));
	cu_assert(cuModuleUnload(modId));
	for (int i=0 ; i<size ; ++i)
		std::cout << hostArrayOut[i] << '\n';
	//TODO fix doubles
	//for (int i=0 ; i<size ; ++i)
		//std::cout << hostArrayDoubleOut[i] << '\n';
	return 0;
}
